{"version":3,"sources":["App.js","index.js"],"names":["initialState","userChoice","computerChoice","result","userScore","computerScore","userHandSrc","computerHandSrc","message","refresh","App","useState","state","setState","computerHandRef","useRef","playerHandRef","winnerRef","MessageRef","choices","icon","name","userSelectionButtons","map","choice","index","onClick","handleClick","value","prevState","generateComputerChoice","current","classList","add","style","animation","randomChoice","Math","floor","random","length","useEffect","timer","setTimeout","className","color","clearTimeout","ref","src","alt","title","onAnimationEnd","bottom","fontSize","target","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e23d313d.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\n\nconst initialState = {\n  userChoice: null,\n  computerChoice: null,\n  result: null,\n  userScore: 0,\n  computerScore: 0,\n  userHandSrc: \"\",\n  computerHandSrc: \"\",\n  message: \"Click on 👊🏽✋🏽✌🏽 to start...\",\n  refresh: \"\",\n};\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const computerHandRef = useRef(null);\n  const playerHandRef = useRef(null);\n  const winnerRef = useRef(null);\n  const MessageRef = useRef(null);\n\n  const choices = [\n    { icon: \"👊🏽\", name: \"rock\" },\n    { icon: \"✋🏽\", name: \"paper\" },\n    { icon: \"✌🏽\", name: \"scissors\" },\n  ];\n  // from this array we will make three buttons\n  const userSelectionButtons = choices.map((choice, index) => (\n    <button key={choice.name} onClick={() => handleClick(choice.name)}>\n      {choice.icon}\n    </button>\n  ));\n\n  // this is when the game start. we get handleClick value from selections button  (rock paper scissors) depending on user click\n  const handleClick = (value) => {\n    setState((prevState) => ({\n      ...prevState,\n      message: \"\",\n      refresh: \"\",\n      userChoice: value,\n      computerChoice: generateComputerChoice(),\n      result: null,\n      computerHandSrc: \"./images/rock.png\",\n      userHandSrc: \"./images/rock.png\",\n    }));\n    playerHandRef.current.classList.add(\"scalable\");\n    computerHandRef.current.classList.add(\"scalable\");\n    playerHandRef.current.style.animation = \"shakePlayerHand 2s ease\";\n    computerHandRef.current.style.animation = \"shakeComputerHand 2s ease\";\n  };\n\n  const generateComputerChoice = () => {\n    const randomChoice = Math.floor(Math.random() * choices.length);\n    return choices[randomChoice].name;\n  };\n\n  // Restarting the game\n  const Restart = () => {\n    setState((prevState) => ({\n      ...prevState,\n      refresh: \"\",\n      result: null,\n      message: \"New Round\",\n      computerHandSrc: \"./images/rock.png\",\n      userHandSrc: \"./images/rock.png\",\n      userScore: 0,\n      computerScore: 0,\n    }));\n    MessageRef.current.style.bottom = \"30%\";\n    MessageRef.current.style.fontSize = \"1.5rem\";\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      // compering user choice and computer choice to set the result and the score.\n      switch (state.userChoice + state.computerChoice) {\n        case \"scissorspaper\":\n        case \"rockscissors\":\n        case \"paperrock\":\n          setState((prevState) => ({\n            ...prevState,\n            result: \"YOU WIN 💪🏽 !     \",\n            refresh: <i className=\"fa fa-refresh\"></i>,\n            userScore: prevState.userScore + 1,\n            computerHandRef: \"hsl(177, 58%, 22%)\",\n          }));\n          winnerRef.current.style.color = \"hsl(177, 58%, 22%)\";\n          break;\n        case \"paperscissors\":\n        case \"scissorsrock\":\n        case \"rockpaper\":\n          setState((prevState) => ({\n            ...prevState,\n            result: \"YOU LOSE 😏 !     \",\n            refresh: <i className=\"fa fa-refresh\"></i>,\n            computerScore: prevState.computerScore + 1,\n          }));\n          winnerRef.current.style.color = \"hsl(0, 47%, 32%)\";\n          break;\n        case \"rockrock\":\n        case \"paperpaper\":\n        case \"scissorsscissors\":\n          setState((prevState) => ({\n            ...prevState,\n            result: \"IT ' S A DRAW 👏🏽 !      \",\n            refresh: <i className=\"fa fa-refresh\"></i>,\n          }));\n          winnerRef.current.style.color = \"hsl(210, 18%, 30%)\";\n          break;\n        default:\n          setState(() => initialState);\n      }\n      // changing the src property of hands img depending on the user and computer choice\n      setState((prevState) => ({\n        ...prevState,\n        userHandSrc: `./images/${state.userChoice}.png`,\n        computerHandSrc: `./images/${state.computerChoice}.png`,\n      }));\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, [state.userChoice, state.computerChoice]);\n\n  return (\n    <div>\n      <h1>Rock - Paper - Scissors - React Game</h1>\n      <div className=\"game\">\n        <div className=\"scores\">\n          <h2>You : {state.userScore}</h2>\n          <h2>Computer : {state.computerScore}</h2>\n        </div>\n        <div className=\"hands\">\n          <img\n            ref={playerHandRef}\n            className=\"playerHand\"\n            src={state.userHandSrc}\n            alt=\"\"\n            title=\"Your Hand\"\n            onAnimationEnd={() => (playerHandRef.current.style.animation = \"\")}\n          />\n          <img\n            ref={computerHandRef}\n            className=\"computerHand\"\n            src={state.computerHandSrc}\n            alt=\"\"\n            title=\"Computer Hand\"\n            onAnimationEnd={() =>\n              (computerHandRef.current.style.animation = \"\")\n            }\n          />\n        </div>\n        <h2 className=\"message\" ref={MessageRef}>\n          {state.message}\n        </h2>\n        <h2 className=\"winner\" ref={winnerRef}>\n          {state.result}\n          <span onClick={() => Restart()} title=\"Restart\">\n            {state.refresh}\n          </span>\n        </h2>\n        <div className=\"selections\">{userSelectionButtons}</div>\n      </div>\n      <p className=\"githubIcon\">\n        Code on &nbsp;\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://github.com/alimadhibujar/Rock-Paper-Scissors-React-Game\"\n        >\n          <i className=\"fa fa-github\" title=\"github\"></i>\n        </a>\n      </p>\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}